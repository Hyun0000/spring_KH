<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
		
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.mycompany.myapp06" />
	<!-- <context:component-scan base-package="com.mycompany.myapp06.**.controller" /> -->
	<!-- controller로 끝이나는 package는 스캔 -->
	
	<!-- DB연결, DataSource, 이 안에 이미 연결된 Connection이 있다. -->
	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		<beans:property name="username" value="scott"/>
		<beans:property name="password" value="TIGER"/>
	</beans:bean>
	
	<!-- 아래 2개의 Bean은 마이바티스가 session을 가지고 관리하기 위한 설정이다. -->
	<!-- Connection은 (classpath:mybatis-config.xml)에서 설정된 내용대로 만들어진다. -->
		<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<!-- SqlSessionFactoryBean class로 new 해서 sqlSessionFactory라는 이름의 SqlSessionFactoryBean class의 instance를 만든다는 의미 -->
	<!-- SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean() -->
			<beans:property name="dataSource" ref="dataSource" />
	<!-- ref="dataSource" 의미
		 <bean>의 id 중 "dataSource"라는 이름(id)을 가지고 있는 <bean>을 이용해 "org.mybatis.spring.SqlSessionFactoryBean" class의 객체(Bean)를 만들것이다.
	-->
			<beans:property name="configLocation" value="classpath:mybatis-config.xml" />
	<!-- configLocation : "Connection 만들때 니가 (mybatis-config.xml)에서 정한 설정들을 내가 한 번에 설정해줄게" -->
	</beans:bean>
	
	<!-- sqlSessionFactory가 만들어 졌으니 실질적인 conn을 만들자 -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<!-- (id="sqlSession")가 dao에서 실질적으로 쓰이는 이름(id)이다. -->
		<beans:constructor-arg ref="sqlSessionFactory"/>
		
		<!-- cf) -->
		<!-- <beans:constructor-arg index="0" ref="sqlSessionFactory"/>도 가능하다. -->
		<!-- 하지만 어차피 argument를 1개만 들고가니까 굳이 index를 적을 필요가 없다. -->
		<!-- argument 1개  = <beans:constructor-arg ref="sqlSessionFactory"/> -->
	</beans:bean>
<!-- =================================================== AOP =================================================== -->
	<!-- Namespaces 탭에서 aop 체크박스 선택 해야한다. -->
	<!-- log 기능에 대한 Bean을 만들어보자 -->
	<!-- 대소문자 구분한다. -->
	
	<!-- AOP용 Bean으로 만들어 질 class를 지정 -->
<!-- 	<beans:bean id="testAop" class="com.mycompany.myapp06.common.service.AroundLog"/>
	
	<aop:config>
		<aop:aspect id="testAspect" ref="testAop">
			같은 AOP 기능이지만 advice를 각각 따로따로 걸수도 있다.
			<aop:before method="beforeLog" pointcut="execution(public * com.mycompany.myapp06..*Service.get*(..))"/>
			<aop:before method="beforeLog" pointcut="execution(public * com.mycompany.myapp06..*Controller.*(..))"/>
			
			<aop:after-returning returning="ro" method="afterReturningLog" pointcut="execution(public * com.mycompany.myapp06..*Service.get*(..))"/>
			<aop:after-returning returning="ro" method="afterReturningDaoLog" pointcut="execution(public * com.mycompany.myapp06..*Controller.*(..))"/>
			
			<aop:after method="afterLog" pointcut="execution(public * com.mycompany.myapp06..*(..))"/>
			
			afterReturningLog method는 반드시 com.mycompany.myapp06.common.service.AroundLog class안에 있어야한다.
			(pointcut="execution(public * com.mycompany.myapp06..*(..))") 조건에 해당하면 afterReturningLog method가 실행된다.
			after-returning은  returning 속성을 작성해야한다.
			
			
			<aop:around method="aroundLog" pointcut="execution(public * com.mycompany.myapp06..*Dao.*(..))"/>
		</aop:aspect>	
	</aop:config> -->
	
<!--
	1. 
	- <beans:bean id="testAop" class="com.mycompany.myapp06.common.service.AroundLog"/>와
	<aop:config> ~ </aop:config>는 다른 영역이다.
	- <beans:bean id="testAop".../>의 영역안에 <aop:config> ~ </aop:config>가 있는게 아니다.
	
	2. <aop:after-returning returning="ro" method="afterReturningLog" pointcut="execution(public * com.mycompany.myapp06..*(..))"/>
	- (pointcut="execution(public * com.mycompany.myapp06..*(..))) 조건에 해당하는 경우
	(class="com.mycompany.myapp06.common.service.AroundLog) class를 먼저 들어오라는 의미이다.
	- 해당 class에 들어온 후 class에 있는 여러 method들 중에서 afterReturningLog method를 실행해라
	
	3. pointcut="execution(public * com.mycompany.myapp06..*(..))"
	(1). public * : method의 반환 타입 조건을 결정, 현재 이 조건(public *)은 모든 반환 타입에 대해 AOP 기능을 적용시키겠다는 의미
					해당 조건은 반드시 1개는 있어야한다.(void이더라도 반환 타입을 명시한거는 맞으니까)
					
	(2). com.mycompany.myapp06.. : com.mycompany.myapp06 뒤에오는(속한) 모든 package에 AOP 기능을 적용시키겠다는 의미
								  몇개의, 어떤 이름의 package가 오든 상관없다.
								  여기서 '..'은 뒤에 com.mycompany.myapp06 뒤에(안에) package가 있어도 되고 없어도 된다는 의미
								  
	(3). * : class 명과 method 명이 무엇이든지 상관없다. 모든 class와 method에 afterReturningLog method를 적용시키겠다는 의미
			 단, class이던 method 이던 반드시 최소 1개는 있어야한다.
			 
	(4). (..) : parameter가 있을 수도 있고 없을 수도 있다.(parameter의 아무거나 type은 상관없다.)
	
	cf)
	* : 반드시 1개 이상은 있어야한다.
	(..) : 0개 이상(있어도 되고 없어도 된다.)
-->
	<!-- ====================== @Annotation을 이용한 log AOP 만들기 ====================== -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!-- ====================== @Annotation을 이용한 transaction AOP 만들기 ====================== -->
	<tx:annotation-driven/>
</beans:beans>