<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
		
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.mycompany.myapp06" />
	
	<!-- DB연결 -->
	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		<beans:property name="username" value="scott"/>
		<beans:property name="password" value="TIGER"/>
	</beans:bean>
	
	<!-- Connection 만들기 -->
	<!-- Connection은 (classpath:mybatis-config.xml)에서 설정된 내용대로 만들어진다. -->
		<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<!-- SqlSessionFactoryBean class로 new 해서 sqlSessionFactory라는 이름의 SqlSessionFactoryBean class의 instance를 만든다는 의미 -->
	<!-- SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean() -->
			<beans:property name="dataSource" ref="dataSource" />
	<!-- ref="dataSource" 의미
		 <bean>의 id 중 "dataSource"라는 이름(id)을 가지고 있는 <bean>을 이용해 "org.mybatis.spring.SqlSessionFactoryBean" class의 객체(Bean)를 만들것이다.
	-->
			<beans:property name="configLocation" value="classpath:mybatis-config.xml" />
	<!-- configLocation : "Connection 만들때 니가 (mybatis-config.xml)에서 정한 설정들을 내가 한 번에 설정해줄게" -->
	</beans:bean>
	
	<!-- sqlSessionFactory가 만들어 졌으니 실질적인 conn을 만들자 -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<!-- (id="sqlSession")가 dao에서 실질적으로 쓰이는 이름(id)이다. -->
		<beans:constructor-arg ref="sqlSessionFactory"/>
		
		<!-- cf) -->
		<!-- <beans:constructor-arg index="0" ref="sqlSessionFactory"/>도 가능하다. -->
		<!-- 하지만 어차피 argument를 1개만 들고가니까 굳이 index를 적을 필요가 없다. -->
		<!-- argument 1개  = <beans:constructor-arg ref="sqlSessionFactory"/> -->
	</beans:bean>
	
	<!-- 네임 스페이스 aop 체크해야한다. -->
	<beans:bean id="testAop" class="com.mycompany.myapp06.common.service.AroundLog"/>
	
		<aop:config>
			<aop:aspect id="testAspect" ref="testAop">
				<aop:before method="beforeLog" pointcut="execution(public * com.mycompany.myapp06..*(..))"/>
				<aop:after-returning returning="ro" method="afterReturningLog" pointcut="execution(public * com.mycompany.myapp06..*(..))"/>
				<!-- <aop:after method="afterLog" pointcut="execution(public * com.mycompany.myapp06..*(..))"/> -->
				<!-- <aop:around method="aroundLog" pointcut="execution(public * com.mycompany.myapp06..*(..))"/> -->
			</aop:aspect>	
	</aop:config>
	
	<!-- 
	<beans:bean id="testAop" class="com.mycompany.myapp06.common.service.AroundLog"/>랑
	
	<aop:config>
			<aop:aspect id="testAspect" ref="testAop">
				<aop:around method="aroundLog" pointcut="execution(public * com.mycompany.myapp06..*(..))"/>
			</aop:aspect>	
	</aop:config> 얘는 다른 영역의 애들이다.
	
	<beans:bean> ~ </beans:bean>가 <aop:config>를 포함하는게 아니다.
	
	execution(public * com.mycompany.myapp06..*(..))조건인 경우
	class="com.mycompany.myapp06.common.service.AroundLog
	여기를 먼저 들어왔다가 나가라는 의미
	 -->
	
	
	
	
	
	
</beans:beans>