<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.mycompany.kiwi" />
	
	<!-- DB연결, DataSource, 이 안에 이미 연결된 Connection이 있다. -->
	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		<beans:property name="username" value="scott"/>
		<beans:property name="password" value="TIGER"/>
	</beans:bean>
	
	<!-- 아래 2개의 Bean은 마이바티스가 session을 가지고 관리하기 위한 설정이다. -->
	<!-- Connection은 (classpath:mybatis-config.xml)에서 설정된 내용대로 만들어진다. -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="configLocation" value="classpath:mybatis-config.xml" />
	</beans:bean>
	
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSessionFactory"/>
	</beans:bean>
	<!-- ====================== @Annotation을 이용한 log AOP 만들기 ====================== -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
		<!-- <annotation-driven />같은 역할 -->
		<!-- @AfterReturning / @Before / @Around 등과 같은 log 관련 @Annotation을 전부 읽어 log AOP로 설정해준다. -->
	
	<!-- ========================== XML을 이용한 transaction AOP 만들기 ========================== -->
	<!-- transaction 작업은 dataSource가 기준이 돼야한다. -->
	
	<!-- 1. -->
	<!-- session 관리(connection 관리)를 위한 Bean 생성 -->
 	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<!-- transactionManager라고 그대로 작성해야한다. -->
		<beans:property name="dataSource" ref="dataSource"></beans:property>
	</beans:bean>
	<!-- log AOP 때와는 달리 class를 따로 만들 필요는 없다. -->
	<!-- transactionManager 탄생 완료 -->
	
	<!-- 2. -->
	<!-- Bean을 만들었으니 transaction을 걸어보자, 정확히는 transaction을 수행할 대상을 설정하는 것이다. -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	<!-- ref 대신 transaction-manager라고 쓰는 것이다.(약속) -->
	<!-- transactionManager라고 그대로 작성해야한다. -->
		<tx:attributes>
			<!-- 아래의 조건(name)에 부합하는 method들은 모두 'dataSource'의 transaction 기능을 걸어준다. -->
			<!-- read-only : 기본값 = false / true ==> 읽기 전용 설정, 즉 transaction의 Insert, Update, Delete 금지 -->
			<tx:method name="get*" rollback-for="Exception" read-only="true"/>
			<!-- read-only="true" : (get으로 시작하는 애들은 select 작업이라고 정했기에 이런 설정이 가능한것) -->
			<tx:method name="*Insert" rollback-for="Exception" read-only="false"/>
			<tx:method name="*Update" rollback-for="Exception" read-only="false"/>
			<tx:method name="*Delete" rollback-for="Exception" read-only="false"/>
			<!-- method의 이름이 (name="") 이면 transaction을 걸겠다는 의미 -->
			<!-- 
				- rollback-for="Exception" : java의 Exception
				- 쉽게 말해 *Service class의 method들 중에서 Exception 범위에 포함되는 예외(Exception)들이 발생하면
		  		rollback 처리하겠다는 것이다.(Exception이 최상위 오류) cf) Exception의 가장 최상위는 Throwable이다.
				- 만약 SQLException에 대해서만 rollback을 설정하고 싶으면 (rollback-for="SQLException")으로 작성하면 된다.
			 -->
		</tx:attributes>
	</tx:advice>
	
	<!-- transaction에 대한 aop 설정 -->
	
	<!-- ====================== @Annotation을 이용한 transaction AOP 만들기 ====================== -->
	<!-- <tx:annotation-driven/> -->
	
	<!--
		tx(transaction)에 관련된 @Annotation이 있는지 소소코드 전체를 다 훑은 다음에
		해당하는 @Annotation이 있으면 transaction 처리를 해주겠다는 의미
		
		transaction에 대한 @Annotation을 등록하러 가보자
		transaction에 대한 @Annotation은 class 전체에 걸수도 있고 method 각각에 걸수도 있다.
	-->
	
	
</beans:beans>
