<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<!-- 컨트롤러 '안에 있는' Annotation들 -->
	<!-- ex)@RequestMapping 등을 싹다 긁어 핸들러 맵핑역할을 하는 것이다.  -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.mycompany.myapp05" />
	<!-- context 모듈에서 제공되는 기능이다. -->
	<!-- component를 scan해줘 -->
	<!-- 예전에는 @component 하나였지만 지금은 구분을 한다. 각 class의 역할을 구분하기 위해 -->
	<!-- @Controller, @Service, @Repository(=dao) 등등으로 구분 -->
	<!-- 위의 것들을 모두 @component로 퉁칠수 있지만 그래도 구분하는게 좋다. -->
	<!-- VO, DTO에는 @component를 사용 -->
	<!-- @component, @Controller, @Service, @Repository 중 하나가 붙어있으면 그것을 긁어 읽어 Bean으로 만들어진다. -->
	
	
	<!-- 아래 2개는 없으면 안 된다. -->
	<!-- <annotation-driven /> -->
	<!-- <context:component-scan base-package="com.mycompany.myapp05" /> -->
</beans:beans>
